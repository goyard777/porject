/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2021-11-10 00:20:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class rightmenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 우측  퀵 메뉴 부분 시작입니다 . -->\r\n");
      out.write("	<div id=\"quickmenu\" name=\"quickmenu\" class=\"only-pc\">\r\n");
      out.write("		<ul class=\"quick_banner\">\r\n");
      out.write("			<a href=\"eventview064b.html?idx=162\">\r\n");
      out.write("				<li class=\"nosmell\"></li>\r\n");
      out.write("			</a>\r\n");
      out.write("			<a href=\"eventviewf89f.html?idx=136\">\r\n");
      out.write("				<li class=\"bestbreed\"></li>\r\n");
      out.write("			</a>\r\n");
      out.write("			<a href=\"eventviewfdd5.html?idx=350\">\r\n");
      out.write("				<li class=\"firstbuying\"></li>\r\n");
      out.write("			</a>\r\n");
      out.write("			<a href=\"eventview9b14.html?idx=462\">\r\n");
      out.write("				<li class=\"sale\"></li>\r\n");
      out.write("			</a>\r\n");
      out.write("\r\n");
      out.write("		</ul>\r\n");
      out.write("		<div class=\"viewed\">\r\n");
      out.write("			<a href=\"javascript:gdscroll(-86)\" onfocus=blur()>\r\n");
      out.write("				<p><img src=\"../resources/images/quickmenu_arrowup.png\"></p>\r\n");
      out.write("			</a>\r\n");
      out.write("			<p class=\"tit\">VIEWED <span id=\"num\" name=\"num\"></span></p>\r\n");
      out.write("			<div id=\"TODAYLIST2\" name=\"TODAYLIST2\" style=\"height:255px;overflow:hidden;\"></div>\r\n");
      out.write("			<a href=\"javascript:gdscroll(86)\" onfocus=blur()>\r\n");
      out.write("				<p><img src=\"../resources/images/quickmenu_arrowdown.png\"></p>\r\n");
      out.write("			</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("			<!-- 위로 올라가기 버튼   -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 위로 올라기가 버튼 script 종료   -->		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<div class=\"go-top\">\r\n");
      out.write("			<p>TOP</p>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!--  우측측 퀵메뉴 부분  -->\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		//퀵메뉴\r\n");
      out.write("		$(function () {\r\n");
      out.write("			var UI = {\r\n");
      out.write("				init: function () { this.quickMenuFn(); },\r\n");
      out.write("				initialize: function () {\r\n");
      out.write("					this.id = {\r\n");
      out.write("						target: { quick: '#quickmenu' }\r\n");
      out.write("					};\r\n");
      out.write("					this.init();\r\n");
      out.write("				},\r\n");
      out.write("				quickMenuFn: function () {\r\n");
      out.write("					var quick = $(this.id.target.quick);\r\n");
      out.write("					var qTop = parseInt(quick.css('top'));\r\n");
      out.write("\r\n");
      out.write("					$(window).scroll(function () {\r\n");
      out.write("						var winTop = $(window).scrollTop();\r\n");
      out.write("						var preTop = qTop + winTop;\r\n");
      out.write("						var newTop = winTop + qTop - (parseInt(quick.css('height')) + qTop - $(window).height() + 10);\r\n");
      out.write("\r\n");
      out.write("						if (newTop <= qTop) {\r\n");
      out.write("							newTop = qTop;\r\n");
      out.write("						}\r\n");
      out.write("						quick.stop().animate({ top: newTop }, 400);\r\n");
      out.write("					})\r\n");
      out.write("				},\r\n");
      out.write("\r\n");
      out.write("				scrollTop: function (eTarget, speed) {\r\n");
      out.write("					var speed = speed || null;\r\n");
      out.write("					eTarget.on('click', function () {\r\n");
      out.write("						$('html, body').animate({\r\n");
      out.write("							scrollTop: $(\"body\").offset().top\r\n");
      out.write("						}, speed)\r\n");
      out.write("					})\r\n");
      out.write("				}\r\n");
      out.write("			};\r\n");
      out.write("			$(function () {\r\n");
      out.write("				UI.initialize();\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("	<!--  우측측 퀵메뉴 부분  끝-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		var currentCategory = null;\r\n");
      out.write("		function showCategory(id, obj) {\r\n");
      out.write("			if (currentCategory == id) {\r\n");
      out.write("				closeCategory();\r\n");
      out.write("				return false;\r\n");
      out.write("			} else if (currentCategory) {\r\n");
      out.write("				closeCategory();\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			$(\"#best-items\").addClass('open');\r\n");
      out.write("			$(obj).addClass('active');\r\n");
      out.write("			currentCategory = id;\r\n");
      out.write("\r\n");
      out.write("			$(\".tmphot\").hide();\r\n");
      out.write("			$(\"div [cate=\" + id + \"]\").show();\r\n");
      out.write("\r\n");
      out.write("			// #category-item 에 데이타를 ajax 등으로 넣은 후 success callback으로 사용하세요.\r\n");
      out.write("			// setTimeout 은 위 ajax 로 갖고오는 타임과 css animation의 샘플을 위해 넣은 것입니다.\r\n");
      out.write("			// @load data\r\n");
      out.write("			//		window.setTimeout(function(){\r\n");
      out.write("			$(\"div [cate=\" + id + \"]\").owlCarousel({\r\n");
      out.write("				loop: false,\r\n");
      out.write("				items: 2,\r\n");
      out.write("				margin: 0,\r\n");
      out.write("				dotsEach: 2,\r\n");
      out.write("				dots: true,\r\n");
      out.write("				nav: false,\r\n");
      out.write("				navText: ['<img src=\"../resources/images/btn_prev.png\">', '<img src=\"../resources/images/btn_next.png\">'],\r\n");
      out.write("				afterUpdate: showItems(),\r\n");
      out.write("				responsive: {\r\n");
      out.write("					360: { margin: 0, nav: true },\r\n");
      out.write("					1000: { margin: 0, nav: true }\r\n");
      out.write("				},\r\n");
      out.write("			});\r\n");
      out.write("			//		}, 100);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function showItems() {\r\n");
      out.write("			$(\"#best-items\").addClass('show-items');\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function closeCategory() {\r\n");
      out.write("			$(\"#best-items li.active\").removeClass('active');\r\n");
      out.write("			$(\"#best-items\").removeClass('open');\r\n");
      out.write("			$(\"#best-items\").removeClass('show-items');\r\n");
      out.write("			currentCategory = null;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		//카테고리 기본 오픈, id 와 li seq\r\n");
      out.write("		showCategory('1', $(\"#best-items ul li:eq(0)\"));\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		function removeHtml(str) {\r\n");
      out.write("			var pattern = /[&lt;][^>]*[>]|[<][^>]*[>]/g\r\n");
      out.write("			str = str.replace(pattern, \"\");\r\n");
      out.write("			return str;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
